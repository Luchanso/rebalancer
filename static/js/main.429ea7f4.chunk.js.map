{"version":3,"sources":["components/CreateBalance/CreateBalance.tsx","components/BalanceInput/BalanceInput.tsx","components/App/styled.ts","components/App/App.tsx","hooks/useLocalStore.ts","hooks/useBalance.ts","serviceWorker.ts","index.tsx"],"names":["CreateBalance","onCreate","onClick","BalanceInput","onChange","balance","e","id","Number","target","value","type","BalanceRows","styled","div","App","key","initialVal","JSON","parse","localStorage","getItem","useState","val","setVal","useEffect","setItem","stringify","useLocalStore","initialBalance","setBalance","addBalance","Object","keys","length","changeBalance","useBalance","handleChange","className","values","map","item","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+LAMO,SAASA,EAAT,GAA6C,IAApBC,EAAmB,EAAnBA,SAC9B,OAAO,4BAAQC,QAASD,GAAjB,kB,kBCCF,SAASE,EAAT,GAAqD,IAA7BC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,QAKvC,OAAO,2BAAOD,SAJd,SAAsBE,GACpBF,EAASC,EAAQE,GAAIC,OAAOF,EAAEG,OAAOC,SAGDC,KAAK,W,wKCXtC,IAAMC,E,KAAcC,EAAOC,IAAV,KC0BTC,MArBf,WAAgB,IAAD,ECLR,SAAuBC,GAC5B,IAAMC,EAAaC,KAAKC,MAAMC,aAAaC,QAAQL,IAAQ,MADlB,EAEnBM,mBAASL,GAFU,mBAElCM,EAFkC,KAE7BC,EAF6B,KAQzC,OAJAC,qBAAU,WACRL,aAAaM,QAAQV,EAAKE,KAAKS,UAAUJ,MACxC,CAACA,EAAKP,IAEF,CAACO,EAAKC,GDFoBI,CAAc,WADlC,mBACNC,EADM,KACUL,EADV,OEIR,SAAoBK,GAA0B,IAAD,EACpBP,mBAAkBO,GADE,mBAC3CxB,EAD2C,KAClCyB,EADkC,KAmBlD,MAAO,CACLzB,UACA0B,WAlBF,WACE,IAAMxB,EAAKyB,OAAOC,KAAK5B,GAAS6B,OAEhCJ,EAAW,eACNzB,EADK,eAEPE,EAAK,CAAEA,KAAIG,MAAO,OAcrByB,cAVF,SAAuB5B,EAAYG,GACjCoB,EAAW,eACNzB,EADK,eAEPE,EAFO,eAEGF,EAAQE,GAFX,CAEgBG,eFjBmB0B,CAAWP,GAAlDE,EAFK,EAELA,WAAYI,EAFP,EAEOA,cAAe9B,EAFtB,EAEsBA,QAEnC,SAASgC,EAAa9B,EAAYgB,GAChCY,EAAc5B,EAAIgB,GAClBC,EAAOnB,GAGT,OACE,yBAAKiC,UAAU,OACb,kBAACtC,EAAD,CAAeC,SAAU8B,IACzB,kBAACnB,EAAD,KACGoB,OAAOO,OAAOlC,GAASmC,KAAI,SAAAC,GAAI,OAC9B,kBAACtC,EAAD,CAAcC,SAAUiC,EAAchC,QAASoC,UGTrCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDsI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.429ea7f4.chunk.js","sourcesContent":["import React from \"react\";\n\ntype Props = {\n  onCreate: () => void;\n};\n\nexport function CreateBalance({ onCreate }: Props) {\n  return <button onClick={onCreate}>Create balance</button>;\n}\n","import React from \"react\";\nimport { SingleBalance } from \"../../hooks/useBalance\";\n\ntype Props = {\n  balance: SingleBalance;\n  onChange: (id: number, value: number) => void;\n};\n\nexport function BalanceInput({ onChange, balance }: Props) {\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    onChange(balance.id, Number(e.target.value));\n  }\n\n  return <input onChange={handleChange} type=\"number\" />;\n}\n","import styled from \"styled-components\";\n\nexport const BalanceRows = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  input {\n    margin-top: 16px;\n  }\n`;\n","import React from \"react\";\nimport { CreateBalance } from \"../CreateBalance/CreateBalance\";\nimport { useBalance } from \"../../hooks/useBalance\";\nimport { BalanceInput } from \"../BalanceInput/BalanceInput\";\nimport { BalanceRows } from \"./styled\";\nimport { useLocalStore } from \"../../hooks/useLocalStore\";\n\nfunction App() {\n  const [initialBalance, setVal] = useLocalStore(\"balance\");\n  const { addBalance, changeBalance, balance } = useBalance(initialBalance);\n\n  function handleChange(id: number, val: number) {\n    changeBalance(id, val);\n    setVal(balance);\n  }\n\n  return (\n    <div className=\"App\">\n      <CreateBalance onCreate={addBalance} />\n      <BalanceRows>\n        {Object.values(balance).map(item => (\n          <BalanceInput onChange={handleChange} balance={item} />\n        ))}\n      </BalanceRows>\n    </div>\n  );\n}\n\nexport default App;\n","import { useEffect, useState } from \"react\";\n\nexport function useLocalStore(key: string) {\n  const initialVal = JSON.parse(localStorage.getItem(key) || \"{}\");\n  const [val, setVal] = useState(initialVal);\n\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(val));\n  }, [val, key]);\n\n  return [val, setVal];\n}\n","import { useState } from \"react\";\n\nexport type SingleBalance = {\n  id: number;\n  value: number;\n};\n\nexport type Balance = {\n  [key: number]: SingleBalance;\n};\n\nexport function useBalance(initialBalance: Balance) {\n  const [balance, setBalance] = useState<Balance>(initialBalance);\n\n  function addBalance() {\n    const id = Object.keys(balance).length;\n\n    setBalance({\n      ...balance,\n      [id]: { id, value: 0 }\n    });\n  }\n\n  function changeBalance(id: number, value: number) {\n    setBalance({\n      ...balance,\n      [id]: { ...balance[id], value }\n    });\n  }\n\n  return {\n    balance,\n    addBalance,\n    changeBalance\n  };\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}